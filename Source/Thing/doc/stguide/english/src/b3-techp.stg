## ------------------------------------------------------------------------
## Protokolle
## ------------------------------------------------------------------------

@node Protocols "Thing Documentation - Protocols"
@prev Protocols
@include header.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    Protocols
     ù AV Protocol
     ù Font Protocol
     ù @{"Drag&Drop" link "Drag&Drop"}
@endnode

## ------------------------------------------------------------------------

@node "AV Protocol"
@toc Protocols
@autorefoff
AV Protocol                                                           Thing
@line 1 75 0 0 7
@autorefon

The AV protocol was developed for use with the Gemini replacement
desktop. Gemini comprised a desktop, Venus, and a command line called
Mupfel. In order for Venus to communicate with desktop accessories the
AV protocol was developed and is widely supported today:

(AV ~ Accessory <-> Venus)

Thing supports most of the messages defined in the 11. Nov 1994 release
and consequently Thing works well as an 'AV Server' for accessories or
under a multitasking environment. Filename quoting is still not supported!

In the following description Thing acts as the 'Server' and accessories
and applications are 'Clients'.

In order to use Thing as an AV Server under a multitasking environment
you must set an environmental variable for Thing called AVSERVER. This is
done as follows:

  @{U}MagiC@{0}
    Entry '#_ENV AVSERVER=THING' in the file MAGX.INF (must be added
    before '#_CTR'!)

  @{U}MultiTOS@{0}
    Entry 'setenv AVSERVER=THING' in the file MINT.CNF.

The following functions are supported by Thing:

  AV_PROTOKOLL        AV_SENDKEY             VA_PATH_UPDATE
  AV_ASKFILEFONT      AV_ASKCONFONT          VA_FONTCHANGED
  AV_OPENWIND         AV_STARTPROG
  AV_ACCWINDOPEN      AV_ACCWINDCLOSED
  AV_STATUS           AV_GETSTATUS
  AV_COPY_DRAGGED     AV_PATH_UPDATE
  AV_WHAT_IZIT        AV_DRAG_ON_WINDOW
  AV_EXIT             AV_STARTED
  AV_XWIND            AV_VIEW
  AV_FILEINFO         AV_COPYFILE
  AV_DELFILE          AV_SETWINDPOS

@box 1 75 41

@image ictip.img 2
      @{U}Some hints for the implementation in your own programs:@{u}

      ù Under Single-TOS only the (main-)application 0 can act as
        AV server.
        In a multitasking environment, like MagiC or MultiTOS you have to
        check the presence of an AV server by checking the environmental
        varibale AVSERVER.

      ù Once a program used AV_PROTOKOLL, it must use AV_EXIT before
        terminating!

      ù A program should always wait for the return of VA_PROTOSTATUS
        before using any other AV_... messages! It may be, that the current
        server does not provide all messages of the AV protocol!

      ù @{B}All memory blocks, which are used to pass file names,
        parameters etc. MUST be allocated 'global' when running under
        MultiTOS!!! (hint: Mxalloc(<size>,0x42)). Otherwise memory
        violations will occur!@{b}

      ù All file names and folder names must be with complete path names.
        (e.g. 'I:\test.txt').

      ù If the server supports 'quoting' of file names, they can be
        enclosed in quotation marks. If a quotation mark is part of the
        file name, it has be repeated once:

          D:\Letter to Moni    becomes   'D:\Letter to Moni'
          D:\Peter's Picture   becomes   'D:\Peter''s Picture'

      ù If there is more than one file name (or folder name), the names
        are separated by a single space (ASCII 32).

      ù Folder names @{I}must@{0} be terminated by a backslash ('\' -
        - ASCII 92) - e.g. 'I:\Letters\' (even Gemini 1.a seems not do
        this)!

      ù To provide 'global' 'Window cycling', AV clients should send
@box 9 9 1
@box 19 3 1
         Control + W  to the server via AV_SENDKEY message.


@endnode

## ------------------------------------------------------------------------

@node AV_PROTOKOLL "AV Protocol, AV_PROTOKOLL"
@toc Protocols
@autorefoff
AV Protocol, AV_PROTOKOLL                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_PROTOKOLL (0x4700) Server <- Client (26. Jun 1995)@{0}

A client asks the server which functions of the AV protocol it
supports. The server replies by sending a VA_PROTOSTATUS message.

  Wort 3:   Bit 0: VA_SETSTATUS
            Bit 1: VA_START
            Bit 2: AV_STARTED
            Bit 3: VA_FONTCHANGED
            Bit 4: Provides and uses file name quoting
            Bit 5: VA_PATH_UPDATE
            Bit 6-15: Reserved, always 0
  Wort 4:   Reserved, always 0
  Wort 5:   Reserved, always 0
  Wort 6+7: Pointer to the name, which has to be used for appl_find()
            to get the AES ID of the client. (8 characters long and
            null terminated).
@endnode

## ------------------------------------------------------------------------

@node VA_PROTOSTATUS "AV Protocol, VA_PROTOSTATUS"
@toc Protocols
@autorefoff
AV Protocol, VA_PROTOSTATUS                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_PROTOSTATUS (0x4701) Server -> Client (26. Jun 1995)@{0}

Reply sent in answer to a AV_PROTOCOL enquiry from the client. The reply,
in the form of a status word, reports which functions of the AV protocol
Thing supports. Greyed out entries will never be supported by Thing.

  Wort 3:   Bit 0:  AV_SENDKEY
            Bit 1:  AV_ASKFILEFONT
            Bit 2:  AV_ASKCONFONT, @{G}AV_OPENCONSOLE@{0}
            Bit 3:  AV_ASKOBJECT
            Bit 4:  AV_OPENWIND
            Bit 5:  AV_STARTPROG
            Bit 6:  AV_ACCWINDOPEN, AV_ACCWINDCLOSED
            Bit 7:  AV_STATUS, AV_GETSTATUS
            Bit 8:  AV_COPY_DRAGGED
            Bit 9:  AV_PATH_UPDATE, AV_WHAT_IZIT, AV_DRAG_ON_WINDOW
            Bit 10: AV_EXIT
            Bit 11: AV_XWIND
            Bit 12: VA_FONTCHANGED
            Bit 13: AV_STARTED
            Bit 14: Provides and uses file name quoting
            Bit 15: AV_FILEINFO, VA_FILECHANGED
  Wort 4:   Bit 0:  AV_COPYFILE, VA_FILECOPIED
            Bit 1:  AV_DELFILE, VA_FILEDELETED
            Bit 2:  AV_VIEW, VA_VIEWED
            Bit 3:  AV_SETWINDPOS
            Bit 4-15: Reserved, always 0
  Wort 5:   Reserved, always 0
  Word 6+7: Pointer to the program names of the servers, prepared for
            appl_find() (8 characters long and null terminated).
@endnode

## --------------------------------------------------------------------

@node AV_GETSTATUS "AV Protocol, AV_GETSTATUS"
@toc Protocols
@autorefoff
AV Protocol, AV_GETSTATUS                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_GETSTATUS (0x4703) Server <- Client (11. Nov 1994)@{0}

Requests the status information saved using AV_STATUS. A VA_SETSTATUS
message is sent as a reply

  No parameters
@endnode

## --------------------------------------------------------------------

@node AV_STATUS "AV Protocol, AV_STATUS"
@toc Protocols
@autorefoff
AV Protocol, AV_STATUS                                                Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_STATUS (0x4704) Server <- Client (11. Nov 1994)@{0}

Using this message a client can tell the server any status information
(presets etc) it might need again. Thing saves this information as a
component of its setup in THING.INF.

This function is primarily useful for Accessories because single TOS
is at best equipped with dodgey buffers!

  Word 3+4: Pointer to a string up to 256 characters long which may not
            contain any control characters.
@endnode

## --------------------------------------------------------------------

@node VA_SETSTATUS "AV Protocol, AV_SETSTATUS"
@toc Protocols
@autorefoff
AV Protocol, VA_SETSTATUS                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_SETSTATUS (0x4705) Server -> Client (11. Nov 1994)@{0}

Reply to a AV_GETSTATUS message. Thing shares the previously saved
status information with the client.

  Word 3+4: Pointer to the saved string or NULL if no information is
            available.
@endnode

## --------------------------------------------------------------------

@node AV_SENDKEY "AV Protocol, AV_SENDKEY"
@toc Protocols
@autorefoff
AV Protocol, AV_SENDKEY                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_SENDKEY (0x4710) Server <- Client (11. Nov 1994)@{0}

Using this message a client can send Thing any keys it doesn't use for
itself.

@box 31 9 1
@box 41 3 1
Note: Thing and Gemini accept  Control + W  to perform a 'global'
 'Window cycling', which takes windows of AV clients in account too.
 The key state (ev_mmokstate) is 0x0004, the scan code (ev_mkreturn) is
 0x1107.

  Word 3: Key state (ev_mmokstate)
  Word 4: Scan code of the pressed key (ev_mkreturn)
@endnode

## --------------------------------------------------------------------

@node VA_START "AV Protocol, VA_START"
@toc Protocols
@autorefoff
AV Protocol, VA_START                                                 Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_START (0x4711) Server -> Client (11. Nov 1994)@{0}

Using this message a server pass parameters to accessories or parallel
running applications.

An exceptional feature: Thing can receive VA_START messages too. In the
command line an individual program or file can be passed. Installed
applications are also taken into account.

Command lines beginning with the ':' character must not be used because
they are interpreted as internal commands!

  Word 3+4: Pointer to the command line. Objects dragged to icons using
            Drag&Drop require the entire filename, i.e path, filename and
            trailing backslash '\' character.
@endnode

## --------------------------------------------------------------------

@node AV_ASKFILEFONT "AV Protocol, AV_ASKFILEFONT"
@toc Protocols
@autorefoff
AV Protocol, AV_ASKFILEFONT                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ASKFILEFONT (0x4712) Server <- Client (11. Nov 1994)@{0}

Using this message the client can request the current font used for
filenames in directory windows. The server the ID and size (in points)
of the font with a VA_FILEFONT message.

See VA_FONTCHANGED too.

  No parameters
@endnode

## --------------------------------------------------------------------

@node VA_FILEFONT "AV Protocol, VA_FILEFONT"
@toc Protocols
@autorefoff
AV Protocol, VA_FILEFONT                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILEFONT (0x4713) Server -> Client (11. Nov 1994)@{0}

Reply to AV_ASKFILEFONT. The server returns the ID and size (in points)
of the current font used for filenames in directory windows.

See VA_FONTCHANGED too.

  Word 3: ID of font (vst_font)
  Word 4: Size in points (vst_point)
@endnode

## --------------------------------------------------------------------

@node AV_ASKCONFONT "AV Protocol, AV_ASKCONFONT"
@toc Protocols
@autorefoff
AV Protocol, AV_ASKCONFONT                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ASKCONFONT (0x4714) Server <- Client (11. Nov 1994)@{0}

A client can request the current font used in the Console window. The
server replies using a VA_CONFONT message the ID and size (in points)
of the font.

See VA_FONTCHANGED too.

  No parameters
@endnode

## --------------------------------------------------------------------

@node VA_CONFONT "AV Protocol, VA_CONFONT"
@toc Protocols
@autorefoff
AV Protocol, VA_CONFONT                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_CONFONT (0x4715) Server -> Client (11. Nov 1994)@{0}

Thing uses this message to answer AV_ASKCONFONT. Thing reports the font
ID and size (in points) of the current font used in the Console window.

See VA_FONTCHANGED too.

  Word 3: ID of font (vst_font)
  Word 4: Size in points (vst_point)
@endnode

## --------------------------------------------------------------------

@node AV_OPENWIND "AV Protocol, AV_OPENWIND"
@toc Protocols
@autorefoff
AV Protocol, AV_OPENWIND                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_OPENWIND (0x4720) Server <- Client (11. Nov 1994)@{0}

Thing opens a new directory window.

  Word 3+4: Pointer to the path of the to open directories
  Word 5+6: Pointer to the file mask. '*.*' is intrepreted as '*' (all
            files) by Thing.
@endnode

## --------------------------------------------------------------------

@node VA_WINDOPEN "AV Protocol, VA_WINDOPEN"
@toc Protocols
@autorefoff
AV Protocol, VA_WINDOPEN                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_WINDOPEN (0x4721) Server -> Client (11. Nov 1994)@{0}

Thing answers client to AV_OPENWIND.

  Word 3: 0   = Error
          !=0 = Window opened and directory updated
@endnode

## --------------------------------------------------------------------

@node AV_STARTPROG "AV Protocol, AV_STARTPROG"
@toc Protocols
@autorefoff
AV Protocol, AV_STARTPROG                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_STARTPROG (0x4722) Server <- Client (11. Nov 1994)@{0}

Thing starts a program at the request of a client.

  Word 3+4: Program name with complete path - optionally including the
            filename. If the filename is included Thing searches for
            the application and the filename then passes the filename,
            as a parameter, to the application.
  Word 5+6: Command line or NULL, if no command line is passed.
  Word 7:   Any 16 Bit value, which VA_PROGSTART passes back
@endnode

## --------------------------------------------------------------------

@node VA_PROGSTART "AV Protocol, VA_PROGSTART"
@toc Protocols
@autorefoff
AV Protocol, VA_PROGSTART                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_PROGSTART (0x4723) Server -> Client (11. Nov 1994)@{0}

Reply to AV_STARTPROG enquiry. Thing always sends an answer immediately,
i.e. after the end of programs started under single TOS which are not
handled as accessories. Currently the Return code of started programs is
always 0.

If Thing ends before starting the program (e.g. Overlay mode under
single TOS or starting an application in single mode under MagiC) no
answer message is sent.

A client will always receive an error message if the program couldn't
be started.

  Word 3: 0   = Error
          !=0 = Program started
  Word 4: Return code of the program (where available)
  Word 7: 16 Bit word from AV_STARTPROG
@endnode

## --------------------------------------------------------------------

@node AV_ACCWINDOPEN "AV Protocol, AV_ACCWINDOPEN"
@toc Protocols
@autorefoff
AV Protocol, AV_ACCWINDOPEN                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ACCWINDOPEN (0x4724)  Server <- Client (11. Nov 1994)@{0}

A client uses this message to share with Thing the information that it has
opened a window. Thing can then extend Drag&drop and cycle window support
to cover this window.

  Word 3: AES handle for window
@endnode

## --------------------------------------------------------------------

@node VA_DRAGACCWIND "AV Protocol, VA_DRAGACCWIND"
@toc Protocols
@autorefoff
AV Protocol, VA_DRAGACCWIND                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_DRAGACCWIND (0x4725) Server -> Client (11. Nov 1994)@{0}

Thing sends an AV_ACCWINDOPEN message to the client sharing the information
that one or more object/s have been dragged to its window.

See AV_COPY_DRAGGED too.

Note: Should the keyboard status for a further answer of the client (e.g.
 AV_COPY_DRAGGED) become neccessary, it should, on receipt of
 VA_DRAGACCWIND, check the value returned from evnt_multi().

 I.e. the EVENT-structure should be ascertained using EvntMulti() and
 not by sending the answer using graf_mkstate()!

  Word 3:   AES window handle
  Word 4:   X position of mouse
  Word 5:   Y position of mouse
  Word 6+7: Pointer to the string including the object names
@endnode

## --------------------------------------------------------------------

@node AV_ACCWINDCLOSED "AV Protocol, AV_ACCWINDCLOSED"
@toc Protocols
@autorefoff
AV Protocol, AV_ACCWINDCLOSED                                         Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ACCWINDCLOSED (0x4726) Server <- Client (11. Nov 1994)@{0}

A client shares information with Thing that it has closed one of its
windows. This only occurs if a client shuts its own window. Under
Single TOS accessory windows are automatically closed on starting
applications and this message is not neccessary.

  Word 3: AES window handle
@endnode

## --------------------------------------------------------------------

@node AV_COPY_DRAGGED "AV Protocol, AV_COPY_DRAGGED"
@toc Protocols
@autorefoff
AV Protocol, AV_COPY_DRAGGED                                          Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_COPY_DRAGGED (0x4728) Server <- Client (11. Nov 1994)@{0}

A client informs Thing an object, or objects, have been delivered via
VA_DRAGACCWIND ready for copying. Thing send the client a VA_COPY_COMPLETE
reply.

  Word 3:   Keyboard status on receipt of VA_DRAGACCWIND
  Word 4+5: Pointer to the destination path
@endnode

## --------------------------------------------------------------------

@node VA_COPY_COMPLETE "AV Protocol, VA_COPY_COMPLETE"
@toc Protocols
@autorefoff
AV Protocol, VA_COPY_COMPLETE                                         Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_COPY_COMPLETE (0x4729) Server -> Client (11. Nov 1994)@{0}

Reply to AV_COPY_DRAGGED from Thing to client.

  Word 3: 0   = Error or user initiated cancel
          !=0 = Objects are copied and the directory window is updated if
                neccessary.
@endnode

## --------------------------------------------------------------------

@node AV_PATH_UPDATE "AV Protocol, AV_PATH_UPDATE"
@toc Protocols
@autorefoff
AV Protocol, AV_PATH_UPDATE                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_PATH_UPDATE (0x4730) Server <- Client (11. Nov 1994)@{0}

A client informs Thing the contents of a directory have changed. Thing
then re-reads the appropriate directories, and any sub directories, in
the given path.

  Word 3+4: Pointer to the absolute path (e.g. C:\AUTO\).
@endnode

## --------------------------------------------------------------------

@node AV_WHAT_IZIT "AV Protocol, AV_WHAT_IZIT"
@toc Protocols
@autorefoff
AV Protocol, AV_WHAT_IZIT                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_WHAT_IZIT (0x4732) Server <- Client (11. Nov 1994)@{0}

A client requests details about what is located at a certain part of
the screen. Thing replies with a VA_THAT_IZIT message.

  Word 3: X-Coordinate
  Word 4: Y-Coordinate
@endnode

## --------------------------------------------------------------------

@node VA_THAT_IZIT "AV Protocol, VA_THAT_IZIT"
@toc Protocols
@autorefoff
AV Protocol, VA_THAT_IZIT                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_THAT_IZIT (0x4733) Server -> Client (11. Nov 1994)@{0}

Reply to a AV_WHAT_IZIT enquiry.

  Word 3:   AES ID for the appropriate application
  Word 4:   Object type
  Word 5+6: Pointer to the object names or NULL, if no names are available

The types are as follows:

@autorefoff
  VA_OB_UNKNOWN   (0)  Unknown (Console window, desktop etc)
  VA_OB_TRASHCAN  (1)  Gemini 'Trash Can' - not available using Thing
  VA_OB_SHREDDER  (2)  Trash Can (Gemini 'Shredder')
  VA_OB_CLIPBOARD (3)  Clipboard
  VA_OB_FILE      (4)  File
  VA_OB_FOLDER    (5)  Folder or directory window background
  VA_OB_DRIVE     (6)  Drive
  VA_OB_WINDOW    (7)  Window belonging to another application
@autorefon
@endnode

## --------------------------------------------------------------------

@node AV_DRAG_ON_WINDOW "AV Protocol, AV_DRAG_ON_WINDOW"
@toc Protocols
@autorefoff
AV Protocol, AV_DRAG_ON_WINDOW                                        Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_DRAG_ON_WINDOW (0x4734) Server <- Client (11. Nov 1994)@{0}

A client informs Thing objects have been dropped somewhere. Thing sorts
out what's happening at the location supplied, then sends a
VA_DRAG_COMPLETE message.

  Word 3:   X position of the mouse
  Word 4:   Y position of the mouse
  Word 5:   Keyboard status
  Word 6+7: Pointer to the string containing the names of the objects
@endnode

## --------------------------------------------------------------------

@node VA_DRAG_COMPLETE "AV Protocol, VA_DRAG_COMPLETE"
@toc Protocols
@autorefoff
AV Protocol, VA_DRAG_COMPLETE                                         Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_DRAG_COMPLETE (0x4735)  Server -> Client (11. Nov 1994)@{0}

Reply to AV_DRAG_ON_WINDOW message.

  Word 3: 0=Nothing changed after the Drag&drop
          1=The given objects were processed (copied, deleted etc.)
@endnode

## --------------------------------------------------------------------

@node AV_EXIT "AV Protocol, AV_EXIT"
@toc Protocols
@autorefoff
AV Protocol, AV_EXIT                                                  Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_EXIT (0x4736) Server <- Client (11. Nov 1994)@{0}

A client informs Thing it no longer observing the AV protocol. This
cancels all AV_ACCWINDOPEN messages too.

This message must be used, before terminating a program if the
program did use AV_PROTOKOLL!

  Word 3: AES ID of the client
@endnode

## --------------------------------------------------------------------

@node AV_STARTED "AV Protocol, AV_STARTED"
@toc Protocols
@autorefoff
AV Protocol, AV_STARTED                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_STARTED (0x4738) Server <- Client (11. Nov 1994)@{0}

A client informs Thing it has received and understood the VA_START
message and the reserved memory for the command line can be released.

At the moment, this message is ignored because Thing does not reserve
any extra memory for VA_START messages.

  Word 3+4: Pointer to the command line, received by VA_START
@endnode

## --------------------------------------------------------------------

@node VA_FONTCHANGED "AV Protocol, VA_FONTCHANGED"
@toc Protocols
@autorefoff
AV Protocol, VA_FONTCHANGED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FONTCHANGED (0x4739) Server -> Client (11. Nov 1994)@{0}

If one of the fonts in Thing is changed all clients, which have already
requested the font via the AV_PROTOKOLL, are informed.

Note: Unfortunately TreeView 2.4, programmed by Stephan Gerle, does not
 react to this message so Thing explicitly sends TreeView (Applications
 named 'TREEVIEW') a VA_FILEFONT message. This is not the ideal solution
 but is a practical workaround.

  Word 3: ID of the font used for directories (vst_font)
  Word 4: Size in points for font used in directories (vst_point)
  Word 5: ID of the font used in the Console window (vst_font)
  Word 6: Size in points for font used in the Console window (vst_point)
@endnode

## --------------------------------------------------------------------

@node AV_XWIND "AV Protocol, AV_XWIND"
@toc Protocols
@autorefoff
AV Protocol, AV_XWIND                                                 Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_XWIND (0x4740) Server <- Client (11. Nov 1994)@{0}

Thing opens a directory window, similar to AV_OPENWIND except
additional options are available:

  Word 3+4: Pointer to the path for opening directories
  Word 5+6: Pointer to the mask (Wildcard) for the available files
  Word 7:   Bit 0:    Use current top window, if available
            Bit 1:    Use wildcard for object selection
            Bit 2-15: Reserved, always 0
@endnode

## --------------------------------------------------------------------

@node VA_XOPEN "AV Protocol, VA_XOPEN"
@toc Protocols
@autorefoff
AV Protocol, VA_XOPEN                                                 Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_XOPEN (0x4741) Server -> Client (11. Nov 1994)@{0}

Reply to AV_XWIND, similar to VA_WINDOPEN.

 Word 3: 0   = Error
         !=0 = Window opened and the directory completely read
               i.e. a available window could be topped.
@endnode

## --------------------------------------------------------------------

@node AV_VIEW "AV Protocol, AV_VIEW"
@toc Protocols
@autorefoff
AV Protocol, AV_VIEW                                                  Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_VIEW (0x4751) Server <- Client (26. Jun 1995)@{0}

Der Server soll den Viewer fr eine bestimmte Datei aufrufen. Ist
kein Viewer vorhanden, erhlt der Benutzer eine Fehlermeldung.

Anmerkung: Thing kennt im Gegensatz zu Gemini 1.a auch Applikationen,
  die zum Anzeigen bestimmter Dateien angemeldet sind. Mit dieser
  Message kann Thing dazu aufgefordert werden eben eine solche
  Applikation zu starten (z.B. einen IMG-Viewer statt einem umfang-
  reichen Grafikprogramm fr IMG-Dateien).

  Wort 3+4: Zeiger auf den Namen der anzuzeigenden Datei (es ist nur
            EINE einzelne Datei zulssig!)
  Wort 5-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node VA_VIEWED "AV Protocol, VA_VIEWED"
@toc Protocols
@autorefoff
AV Protocol, VA_VIEWED                                                Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_VIEWED (0x4752) Server -> Client (26. Jun 1995)@{0}

Antwort auf AV_VIEW. Der Server teilt dem Client mit, ob die
Datei angezeigt wird oder nicht. Die Antwort wird sofort und immer
verschickt, falls ein Fehler aufgetreten ist. Andernfalls erhlt
man die Antwort in einer Multitasking-Umgebung sobald der Viewer
aktiv ist oder unter Single-TOS nach Beendigung des Viewers, falls
der Server nicht vorher beendet wurde (z.B. durch Auslagerung vor
dem Start des Viewers).

  Wort 3:   0=Fehler, 1=Alles ok
  Wort 4-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node AV_FILEINFO "AV Protocol, AV_FILEINFO"
@toc Protocols
@autorefoff
AV Protocol, AV_FILEINFO                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_FILEINFO (0x4753) Server <- Client (26. Jun 1995)@{0}

Datei-/Ordnerinfo anzeigen. Als Antwort erhlt man VA_FILECHANGED.

  Wort 3+4: Zeiger auf Datei oder Ordnernamen. Mehrere Dateien/Ordner
            werden durch Leerzeichen getrennt. Ordner MSSEN mit ab-
            schliessendem '\' bergeben werden!
  Wort 5-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node VA_FILECHANGED "AV Protocol, VA_FILECHANGED"
@toc Protocols
@autorefoff
AV Protocol, VA_FILECHANGED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILECHANGED (0x4754) Server -> Client (26. Jun 1995)@{0}

Antwort auf AV_FILEINFO.

  Wort 3+4: Zeiger auf die Namen der Dateien/Ordner, die bei
            AV_FILEINFO bergeben wurden, wobei natrlich einige
            Dateien/Ordner neue Namen haben knnen

            Beispiel: Es wurde 'C:\ANNA.TXT C:\AUTO\' bergeben.
                      Der Benutzer ndert 'ANNA.TXT' in 'ANNELIE.TXT'
                      um. Als Ergebnis erhlt man dann in dieser
                      Message den String 'C:\ANNELIE.TXT C:\AUTO\'

  Wort 5-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node AV_COPYFILE "AV Protocol, AV_COPYFILE"
@toc Protocols
@autorefoff
AV Protocol, AV_COPYFILE                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_COPYFILE (0x4755) Server <- Client (26. Jun 1995)@{0}

Dateien/Ordner kopieren/verschieben. Als Antwort erhlt man
VA_FILECOPIED.

  Wort 3+4: Zeiger auf die Quelldateie(n) und -Ordner, durch Leer-
            stellen getrennt, Order mit abschliessendem '\'
  Wort 5+6: Zeiger auf den Zielordner
  Wort 7:   Bit 0:    Originale lschen (verschieben)
            Bit 1:    Kopien umbenennen
            Bit 2:    Ziel kommentarlos berschreiben
            Bit 3-15: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node VA_FILECOPIED "AV Protocol, VA_FILECOPIED"
@toc Protocols
@autorefoff
AV Protocol, VA_FILECOPIED                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILECOPIED (0x4756) Server -> Client (26. Jun 1995)@{0}

Antwort auf AV_COPYFILE.

  Wort 3:   0=Fehler, 1=Alles Ok
  Wort 4-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node AV_DELFILE "AV Protocol, AV_DELFILE"
@toc Protocols
@autorefoff
AV Protocol, AV_DELFILE                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_DELFILE (0x4757) Server <- Client (26. Jun 1995)@{0}

Dateien/Ordner lschen. Als Antwort erhlt man VA_FILEDELETED.

  Wort 3+4: Zeiger auf die zu lschenden Dateie(n)/Ordner, durch Leer-
            stellen getrennt, Order mit abschliessendem '\'
  Wort 5-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node VA_FILEDELETED "AV Protocol, VA_FILEDELETED"
@toc Protocols
@autorefoff
AV Protocol, VA_FILEDELETED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILEDELETED (0x4758) Server -> Client (26. Jun 1995)@{0}

Antwort auf AV_DELFILE.

  Wort 3:   0=Fehler, 1=Alles Ok
  Wort 4-7: reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node AV_SETWINDPOS "AV Protocol, AV_SETWINDPOS"
@toc Protocols
@autorefoff
AV Protocol, AV_SETWINDPOS                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_SETWINDPOS (0x4759) Server <- Client (26. Jun 1995)@{0}

Als Erweiterung zu AV_XWIND bzw. AV_OPENWIND gedacht. Hiermit
kann ein Client angeben, an welcher Position und mit welcher
Gre das nchste Verzeichnisfenster (mit AV_XWIND oder AV_OPENWIND)
geffnet werden soll. Die Koordinaten werden absolut angegeben.

Wird durch AV_XWIND kein neues Fenster geffnet, sondern nur ein
bereits offenes Fenster getoppt, ist diese Message ohne Wirkung!

  Wort 3:  Position X
  Wort 4:  Position Y
  Wort 5:  Breite
  Wort 6:  Hhe
  Wort 7:  reserviert, immer 0
@endnode

## --------------------------------------------------------------------

@node VA_PATH_UPDATE "AV Protocol, VA_PATH_UPDATE"
@toc Protocols
@autorefoff
AV Protocol, VA_PATH_UPDATE                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_PATH_UPDATE (0x4760) Server -> Client (26. Jun 1995)@{0}

Hat der Client bei AV_PROTOKOLL kundgetan, dass er diese Message
akzeptiert, teilt der Server hiermit mit, dass sich der Inhalt
eines Verzeichnisses gendert hat. Der Client sollte dann ggf.
auch alle betroffenen Unterverzeichnisse neu lesen bzw. schliessen,
wenn diese nicht mehr existieren.

  Wort 3+4: Zeiger auf das Verzeichnis, immer mit '\' abgeschlossen
  Wort 5-7: reserviert, immer 0
@endnode

## ------------------------------------------------------------------------

@node "Font Protocol"
@toc Protocols
@autorefoff
Font Protocol                                                         Thing
@line 1 75 0 0 7
@autorefon

Thing untersttzt seit Version 0.40 auch die wichtigsten Funktionen des
Font-Protokolls, das von Christian Grunenberg eingefhrt wurde.

Thing kann auch als Font Selector installiert werden. Derzeit untersttzt
aber nur ST-Guide vom 30.04.1995 oder neuer diese Option. Damit das Ganze
funktioniert, mssen folgende Bedingungen erfllt sein:

 ù Thing mu parallel zur Applikation laufen - entweder luft die
   Applikation als Accessory, oder man arbeitet in einer Multitasking-
   Umgebung

 ù Die Environmentvariable FONTSELECT mu auf 'THING' gesetzt werden

Nachfolgend eine Beschreibung der von Thing untersttzen Messages. Eine
vollstndige Definition ist von Christian Grunenberg
(Christian Grunenberg @ LB bzw. Christian_Grunenberg@LB.maus.de)
erhltlich.
@endnode

## ------------------------------------------------------------------------

@node FONT_SELECT "Font Protocol, FONT_SELECT"
@toc Protocols
@autorefoff
Font Protocol, FONT_SELECT                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}FONT_SELECT (0x7A19)  Applikation -> Thing@{0}

Eine Applikation ruft den Font Selector auf und erhlt bei erfolgreicher
Auswahl eines Fonts durch den Benutzer die Antwort FONT_CHANGED.

  Wort 3: Handle des betroffenen Fensters, oder negativer Wert, falls
          der Font in allen Fenster gendert werden soll.
  Wort 4: Font-ID oder 0
  Wort 5: Font-Gre in Punkt
  Wort 6: Font-Farbe
  Wort 7: Effekte - Bit 0:    Fett
                    Bit 1:    Hell
                    Bit 2:    Kursiv
                    Bit 3:    Unterstrichen
                    Bit 4:    Umrandet (Outline)
                    Bit 5:    Schattiert
                    Bit 6:    Invers
                    Bit 7-15: reserviert, immer 0
@endnode

## ------------------------------------------------------------------------

@node FONT_CHANGED "Font Protocol, FONT_CHANGED"
@toc Protocols
@autorefoff
Font Protocol, FONT_CHANGED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}FONT_CHANGED (0x7A18)  Applikation <- Thing@{0}

Antwort auf FONT_SELECT. Thing teilt der Applikation die neuen Werte mit.
Der Aufbau entspricht dem von FONT_SELECT, lediglich das Wort 1 der Message
enthlt die Applikations-ID von Thing.

Diese Message wird von Thing auch dann verschickt, wenn ein Font per
Drag&Drop in ein Fenster einer anderen Applikation gelegt wurde.

@box 1 75 4

@image ictip.img 2
      Unter Single-TOS sollte man WINX installieren, damit Thing auch
      den Eigentmer der Fenster ermitteln kann).


Thing akzeptiert diese Message auch als Empfnger und ndert
bei Bedarf die Darstellung in den Fenstern.
@endnode

## ------------------------------------------------------------------------

@node Drag&Drop
@next Drag&Drop
@toc Protocols
@autorefoff
Drag&Drop                                                             Thing
@line 1 75 0 0 7
@autorefon

Dieses Protokoll wurde von Atari fr MultiTOS eingefhrt und wird mittler-
weile auch von MagiC!3 untersttzt.


@{U}Thing als Sender@{0}

Thing verwendet dieses Protokoll automatisch, wenn eines oder mehrere
Objekte in ein Fenster einer anderen Applikation gelegt werden, die nicht
als AV-Client arbeitet und ihre Fenster nicht mit AV_ACCWINDOPEN angemeldet
hat.

Nebenbei 'konvertiert' Thing auch AV-Drag&Drop-Messages (AV_DRAG_ON_WINDOW)
in das D&D-Protokoll ;-) Damit ist es jetzt auch mglich z.B. mit ParaFin
Dateien suchen zu lassen und diese per Drag&Drop ber CoNnect senden zu
lassen usw.

Versteht der Empfnger das D&D-Protokoll nicht oder ist das System dafr
nicht ausgelegt (z.B. MagiC!2 oder Single-TOS), schickt Thing als
'Notlsung' eine VA_START-Message mit den Namen der geDraggten Objekte als
Kommandozeile, wenn das System die Abfrage des Fenster-Eigentmers unter-
sttzt (Tip fr Single-TOS-Benutzer: WINX verwenden).


@{U}Thing als Empfnger@{u}

Mangels Testobjekten konnte ich die saubere Implementierung leider noch
nicht so richtig austesten. Mir stand nur CAT zur Verfgung, da markierte
Textblcke als '.TXT' verschickt.

Wird ein '.xxx'-Block auf den Desktop gelegt, fordert Thing zum Speichern
der Datei auf. Wurde ein Laufwerk etc. als Ziel gewhlt, erscheint der
entsprechende Pfad als Vorgabe. Hat man einen solchen Block auf die Ablage
gelegt, speichert Thing die Daten automatisch als 'SCRAP.xxx' im GEM-
Clipboard.

Wurde ein Dialogfenster als Ziel gewhlt, wird der Block, sofern es sich
um einen '.TXT'-Block handelt, in das Eingabefeld eingefgt (sofern
sinnvoll - deshalb geht das auch nicht bei allen Dialogen).

'ARGS'-Blcke werden wie VA_START behandelt - d.h. die bermittelte
Kommandozeile wird einfach ausgefhrt.

'PATH'-Blcke werden derzeit noch ignoriert und mit DD_NAK abgewiesen.
@endnode
