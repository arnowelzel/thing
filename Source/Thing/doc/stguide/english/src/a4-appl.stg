## ------------------------------------------------------------------------
## Applikationen
## ------------------------------------------------------------------------

@node Applications "Thing Documentation - Applications"
@prev Applications
@include header.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    Applications
     ˘ @{"General" link %ApplALG}
     ˘ @{"Properties of an application" link %ApplM}
     ˘ @{"Embedding of command line shells" link Shells}
@endnode

## ------------------------------------------------------------------------

@node %ApplALG "Applications - General"
@toc Applications
@autorefoff
Applications, General                                                 Thing
@line 1 75 0 0 7
@autorefon

Thing behandelt bestimmte Dateien als ausfÅhrbare Programme. Die optionalen
Angaben kînnen in der Voreinstellung in der Rubrik 'System' eingestellt
werden.

  @{U}GEM-Programme@{u}
    Alle Dateien mit den Endungen PRG, APP, GTP und (optional) PRX, APX.

    GEM-Programme werden entweder normal gestartet, oder sie erhalten
    in einer Multitasking-Umgebung ggf. eine Kommandozeile via VA_START.

    Bei Programmen mit der Endung GTP wird man zur Eingabe der
    Kommandozeile aufgefordert, wenn das Programm ohne Parameter (d.h.
    z.B. ohne Drag&Drop von Dateien auf das Programm-Icon) gestartet
    wird.

  @{U}Accessories@{u}
    Alle Dateien mit der Endung ACC und (optional) ACX.

    Accessories werden von Thing nur mit VA_START oder (optional) mit
    AC_OPEN 'aufgeweckt'. Ist ein Accessory noch nicht aktiv, wird es
    als wie ein normales GEM-Programm behandelt, wobei Thing (optional)
    vor dem Start sicherheitshalber nachfragt, da nicht alle Accessories
    auch als Programme laufen.

  @{U}TOS-Programme@{u}
    Alle Dateien mit der Endung TOS oder TTP. Unter MiNT werden auch
    Dateien ohne spezielle Endung aber mit gesetzem 'x'-Flag wie TTPs
    behandelt.

    TOS-Programme werden entweder im Console-Fenster von Thing oder
    optional mit VT52 (unter MagiC), MINIWIN (unter MultiTOS) oder
    TOSWIN (Single-TOS & MiNT) ausgefÅhrt.

    Im Gegensatz zu GEM-Programmen ist hier keine ParameterÅbergabe
    mit VA_START mîglich. Bei TTPs erfolgt wie bei GTP ggf. eine
    Parameterabfrage.

  @{U}CPX-Module (optional)@{u}
    Ist das 'alternative Kontrollfeld' (welch eine Untertreibung...)
    Space von Christian Grunenberg installiert, besteht auch die
    Mîglichkeit Dateien mit den Endungen CPX, EPX und (optional) CPZ, EPZ
    als normale GEM-Programme zu verwenden.

    Der entscheidende Unterschied besteht darin, daû CPX-Module mit
    Hilfe von Space auch unter Single-TOS @{I}parallel@{i} zu Thing
    laufen kînnen!

ZunÑchst besteht nur die Mîglichkeit, Programme einfach zu starten.
Das erfolgt entweder durch Doppelklick auf die Programmdatei oder
per Drag&Drop von Dateien auf das jeweilige Programmicon.

Der eigentliche Vorteil eines Desktops besteht aber darin, daû man
auch angeben kann, welche Programme fÅr bestimmte Dateien zustÑndig
sind, so daû ein Doppelklick auf eine Datei zum Starten des zustÑndigen
Programms fÅhrt. Dieser Vorgang wird in Thing als 'ôffnen' bezeichnet.

DarÅber hinaus kennt Thing aber noch die Aktionen 'Anzeigen' und 'Drucken',
fÅr die ebenfalls bestimmte Programme angemeldet werden kînnen. Dabei gibt
es in Thing nicht 'das Anzeigeprogramm' und 'das Druckprogramm', sondern
es ist auch hier mîglich, exakt anzugeben, welche Programme fÅr das
Anzeigen oder Drucken bestimmter Dateien zustÑndig sind -- so kann man
z.B. einen DVI-Treiber zum Drucken und Anzeigen aller DVI-Dateien anmelden
und ein Text-Druckprogramm wie IdeaList zum Drucken aller Åbrigen Dateien.
@endnode

## ------------------------------------------------------------------------

@node %ApplM "Applications - Properties"
@toc Applications
@xref %map2 "Options for installed applications"
@autorefoff
Applications, Properties                                              Thing
@line 1 75 0 0 7
@autorefon

Jedes Programm hat bestimmte Merkmale. Dazu gehîren:

  @{U}FÅr welche Dateien ist das Programm zustÑndig?@{u}
    Hierzu kann man in Thing eine oder mehrere Wildcards fÅr die Aktionen
    'ôffnen', 'Anzeigen' und 'Drucken' angeben. So ist beispielsweise fÅr
    einen Texteditor der Eintrag '*.txt,*.doc' fÅr die Aktion 'ôffnen' oder
    '*' bei 'Anzeigen' in einem Viewer denkbar.

  @{U}Art des Programms (abhÑngig vom Dateinamen)@{u}
    Dies legt fest, wie das Programm gestartet wird.

  @{U}Ein eindeutiger Titel@{u}
    Ist kein Titel angegeben, wird immer der Dateiname des Programms
    als Titel verwendet. Man kann aber auch beliebige eigene Titel
    angeben, die dann in der öbersicht aller angemeldeten Applikationen
    erscheinen und auch als Beschriftung fÅr Desktop- und Gruppenicons
    verwendet werden, wenn das Programm aus einem Verzeichnisfenster dort
    abgelegt wird.

  @{U}Shortcut (optional)@{0}
    Im Gegensatz zu Dateien und Ordnern kann man bei Programmen auch
@box 5 11 1
     Alternate -Shortcuts verwenden, die das Programm nicht nur starten,
    sondern (optional) auch alle selektierten Objekte als Kommandozeile
    Åbergeben.

  @{U}Startverzeichnis@{0}
    Normalerweise findet ein Programm unmittelbar nach dem Start als
    Startverzeichnis sein eigenes Verzeichnis vor. Manchmal ist es aber
    sinnvoller, wenn das Verzeichnis der in der Kommandozeile Åbergebenen
    Dateien gesetzt wird. Thing bietet daher die Mîglichkeit, wahlweise
    das Verzeichnis der Programmdatei, das Verzeichnis des aktiven Ver-
    zeichnisfensters beim Start oder das Verzeichnis, in sich die
    Åbergeben(en) Dateie(n) befinden zu setzen.

DarÅber hinaus kînnen noch eine Vielzahl von Optionen verÑndert werden,
die das Verhalten von Thing und die Art der ProgrammausfÅhrung beein-
flussen.

 @{"Options for installed applications" link %map2}
@endnode

## ------------------------------------------------------------------------

@node Shells "Applications - Shells"
@next Shells
@toc Applications
@autorefoff
Applications, Shells                                                  Thing
@line 1 75 0 0 7
@autorefon

Wer schon mit Gemini gearbeitet hat, kennt sicher die VorzÅge der dort
integrierten Shell 'Mupfel':

 1. Die Shell muss nicht nachgeladen werden und steht immer zur VerfÅgung

 2. Man kann Objekte auf Mupfel-Scripts legen, die dann dem Script als
    Kommandozeilen-Parameter zur VerfÅgung stehen

 3. Mupfel-Scripts kînnen als Applikation zum ôffnen bestimmter Dateien
    angemeldet werden

Nun -- jede Shell muû in Thing als Programm nachgeladen werden. Das
erscheint auf den ersten Blick als Nachteil. Jedoch hat man so die Wahl
eine beliebige Shell zu verwenden und ist nicht meinen ProgrammierkÅnsten
ausgeliefert ;-)

Das Ablegen von Objekten auf Scripts und das Anmelden von Scripts als
Applikation ist aber mîglich! Wie das geht, wird im Folgenden
beschrieben...

@autorefoff
@{U}Anmelden einer Shell@{u}

ZunÑchst muû Thing natÅrlich wissen, wer fÅr die Abarbeitung von Scripts
zustÑndig ist. Also meldet man die Shell seiner Wahl an und trÑgt dort
unter 'Dateien - ... ôffnen:' die Script-Dateien ein (z.B. '*.mup').
Damit man auf die Scripts auch Objekte ablegen kann, muû die Option
'mit Drag&Drop' gesetzt werden.

@{U}Drag&Drop@{u}

Drag&Drop bedeutet in diesem Zusammenhang: Man kann auf einen beliebigen
Script Dateien, Ordner und Programme ablegen, die dann zusammen mit dem
Namen des Scripts als Kommandozeilenparameter die Shell Åbergeben werden.

Beispiel: Wenn man die Datei F:\INCOMING\ALICE.LZH auf den Script
  D:\TOOLS\UNPACK.MUP legt, wÅrde die Kommandozeile

  'D:\TOOLS\UNPACK.MUP F:\INCOMING\ALICE.LZH'

  erzeugt. Innerhalb des Scripts bleibt davon dann nur noch der zweite
  Parameter -- also 'F:\INCOMING\ALICE.LZH' Åbrig.

@{U}Anmelden eines Scripts als Applikation@{u}

Hat man eine Shell einmal angemeldet, kann man natÅrlich auch die
Scripts als 'Applikation' verwenden -- ganz wie in Gemini ;-)

Startverzeichnis, Default-Parameter, Optionen, Environment werden dabei
derzeit von der zustÑndigen Applikation Åbernommen. Dies kann sich aber
in zukÅnftigen Thing-Versionen noch Ñndern.

Man muû sich auch nicht auf eine Shell beschrÑnken! So ist es durchaus
mîglich z.B. sowohl Mupfel als auch MCMD und GAWK gleichzeitig
anzumelden und so *.mup, *.bat und *.awk wie Programme zu verwenden!
@autorefon
@endnode
