## ------------------------------------------------------------------------
## Dateiformate
## ------------------------------------------------------------------------

@node "File formats" "Thing Documentation - File formats"
@prev "File formats"
@include header.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    File formats
     ˘ @{"Icon assignments (ICONS.INF)" link %DateiformateIC}
     ˘ @{"General configuration (THING.INF)" link %DateiformateT}
     ˘ @{"Desktop configuration (xxxxyyyy.INF)" link %DateiformateDSK}
     ˘ @{"Colour settings (COLORxxx.INF)" link %DateiformateCOL}
     ˘ @{"Object groups (*.GRP)" link %DateiformateGRP}
     ˘ @{"Resource THING.RSC" link %DateiformateRSC}
@endnode

## ------------------------------------------------------------------------

@node %DateiformateIC "File formats - ICONS.INF"
@symbol "ICONS.INF"
@toc "File formats"
@xref Icons
@xref thingicn.hyp "Thing Icon Manager"
@autorefoff
File formats, ICONS.INF                                               Thing
@line 1 75 0 0 7
@autorefon

Die Datei ICONS.INF enthÑlt die Zuordnungen von Icons aus ICONS.RSC zu
Laufwerken, Dateien und Ordnern. Fehlt diese Datei, verwendet Thing nur die
Standard-Icons, wie sie unter Icons beschrieben sind.

Thing sucht diese Datei - ebenso ICONS.RSC - nur im Startverzeichnis, oder
in dem Verzeichnis, daû durch in Environmentvariable THINGDIR angegeben
ist. HOME wird nicht beachtet.

Zeilen mit einem fÅhrenden '#' werden ignoriert und kînnen zur Kommen-
tierung verwendet werden. Leerzeilen werden ebenfalls ignoriert. Die Zei-
lenlÑnge darf 510 Zeichen nicht Åberschreiten. öbrigens wird diese Datei
natÅrlich @{I}nicht@{i} im Speicher gehalten! Statt dessen werden die
Zuordnungen 'interpretiert' und daraus interne, optimierte Strukturen
aufgebaut. Das ist Åbrigens auch ein Grund, weshalb es in Thing keine
eingebaute Funktion zur énderung der Zuordnungen gibt.

Jede Zeile hat folgendes Format:

@box 3 68 19

   <Typ> "<Icon>" <Wildcard>[,<Wildcard>..] [<Zeichen>]

@line 3 68 0
   <Typ>       IFIL - Zuordnung fÅr Dateien/Programme
               IFLD - Zuordnung fÅr Ordner
               IDRV - Zuordnung fÅr Laufwerke
   <Icon>      Beschriftung des Icons in der Resourcedatei
   <Wildcard>  Eine oder mehrere Dateimasken durch Kommas getrennt,
               die Masken werden nicht case-sensitiv bewertet - d.h.
               die Masken "*.txt" und "*.TXT" fÅhren zum gleichen
               Ergebnis.
               Bei Laufwerken gibt man hier die Laufwerksbuchstaben
               an (z.B. IDRV "FLOPPY" A,B)
   <Zeichen>   Ein optionales Zeichen, dass @{U}ohne@{0} Komma, mit
               mindestens einer Leerstelle Abstand angegeben wird.
               Dieses Zeichen wird dann in der Textdarstellung am
               linken Rand vor dem Dateinamen ausgegeben, wenn es
               sich bei der Datei nicht um ein ausfÅhrbares Programm
               handelt.

Zum besseren VerstÑndnis ein Beispiel:

  # Einzelne Programme
  #
  IFIL "KOBOLD 2"   kobold_2.prg
  IFIL "PURE C"     pc.prg
  #
  # Dateien
  #
  IFIL "APP"        *.prg,*.app
  IFIL "TOS"        *.tos,*.ttp
  IFIL "RSC"        *.rsc r
  IFIL "TXT"        *.txt,*.doc
  #
  # Ordner
  #
  IFLD "AUTO DIR"   auto
  IFLD "GEMSYS DIR" gemsys
  #
  # Laufwerke
  #
  IDRV "DONALD" c
  IDRV "FILESYSTEM" i,u

@box 1 75 7

@image icwarn.img 2
      Die Zuordnungen sollten so erfolgen, daû man zunÑchst alle genau be-
      zeichneten Dateien, Programme und Ordner angibt (z.B. 'PC.PRG') und
      danach Wildcards (z.B. '*.PRG'), da immer der erste passende Eintrag
      verwendet wird - eine genauere PrÅfung wÅrde unverhÑltnismÑssig viel
      Zeit in Anspruch nehmen und wurde deshalb nicht implementiert.


@endnode

## ------------------------------------------------------------------------

@node %DateiformateT "File formats - THING.INF"
@toc "File formats"
@autorefoff
File formats, THING.INF                                               Thing
@line 1 75 0 0 7
@autorefon

In der Datei THING.INF werden alle auflîsungsunabhÑngigen Einstellungen
(auûer den Iconzuordnungen) gespeichert. Thing sucht die Datei entweder
im Startverzeichnis, in dem Verzeichnis, daû in der Environmentvariablen
HOME angegeben ist, oder in dem Verzeichnis daû in der Environmentvariablen
THINGDIR angegeben ist. THINGDIR setzt Åbrigens HOME auûer Kraft!

Unter Anderem wird in THING.INF gespeichert:

 - Voreinstellung 'Fenster'
 - Voreinstellung 'TOS2GEM'
 - Voreinstellung 'Kopieren'
 - Voreinstellung 'System'
 - Angemeldete Applikationen
 - Position und Grîûe der Verzeichnisfenster und des Consolefensters
 - Verwendung 3D-Effekte, Doppelklick mit rechter Maustaste, Iconraster

Jede Zeile dieser Datei besteht aus einer vier Zeichen langen Kennung und
dem eigentlichen Inhalt ab dem sechsten Zeichen. Da sich Details dieser
Datei im Zuge der Weiterentwicklung von Thing laufend Ñndern, vermerkt
Thing am Anfang der Datei die Versionsnummer, um ggf. Besonderheiten von
Ñlteren Versionen beim weiteren Einlesen zu berÅcksichtigen:

  VERS 61

Dabei steht 61 fÅr '0.61'. Version 1.00 wÅrde hier 100 eintragen.

@box 1 75 8

@image icwarn.img 2
      Die Versionsnummer, die Thing erzeugt, darf auf keinen Fall verÑn-
      dert werden!!! Fehlt diese Angabe geht Thing vom Format der Version
      0.24 aus (dort wurde dieses Feature nÑmlich eingefÅhrt ;-)), was
      mit absoluter Sicherheit zu groûen Problemen fÅhrt. Auch eine zu
      niedrige Versionsnummer kînnte zur Folge haben, daû Teile der
      Konfiguration falsch interpretiert oder gÑnzlich ignoriert werden!


Zeilen mit einem fÅhrenden '#' werden ignoriert und kînnen zur Kommen-
tierung verwendet werden. Leerzeilen werden ebenfalls ignoriert. Die Zei-
lenlÑnge darf 510 Zeichen nicht Åberschreiten.

Der genaue Aufbau der einzelnen Zeilen kann beim Autor erfragt werden.
Man sollte sich aber nicht daran machen, irgendwelche Tools zu schreiben,
die THING.INF verÑndern! Der Inhalt der einzelnen Zeilen ist direkt
abhÑngig von der Versionsnummer von Thing und kann sich jederzeit Ñndern!
@endnode

## ------------------------------------------------------------------------

@node %DateiformateDSK "File formats - Desktop configuration"
@toc "File formats"
@autorefoff
File formats, Desktop configuration                                   Thing
@line 1 75 0 0 7
@autorefon

Die Desktop-Konfiguration wird auflîsungsabhÑngig gespeichert. Der Name der
Datei setzt sich dabei zusammen aus der aktuellen Auflîsung:

  xxxxyyyy.INF

Wobei 'xxxx' die horizontale, und 'yyyy' die vertikale Auflîsung ist. Bei
640*400 Punkten wÅrde die Datei den Namen

  06400400.INF

tragen. Thing sucht die Datei entweder im Startverzeichnis, in dem Ver-
zeichnis, daû in der Environmentvariablen HOME angegeben ist, oder in dem
Verzeichnis daû in der Environmentvariablen THINGDIR angegeben ist.
THINGDIR setzt Åbrigens HOME auûer Kraft!
@endnode

## ------------------------------------------------------------------------

@node %DateiformateCOL "File formats, Colour settings"
@toc "File formats"
@autorefoff
File formats, Colour settings                                         Thing
@line 1 75 0 0 7
@autorefon

Die Farbeinstellungen werden abhÑngig von der aktuelle Farbtiefe gespei-
chert. Der Name Datei setzt sich dabei zusammen aus dem Wort 'COLOR' und
der aktuellen Farbtiefe:

  COLORxxx.INF

Wobei 'xxx' die Anzahl der Bitplanes ist. Bei 16 Farben wÅrde die Datei den
Namen

  COLOR004.INF

tragen. Thing sucht die Datei entweder im Startverzeichnis, in dem Ver-
zeichnis, daû in der Environmentvariablen HOME angegeben ist, oder in dem
Verzeichnis daû in der Environmentvariablen THINGDIR angegeben ist.
THINGDIR setzt Åbrigens HOME auûer Kraft!
@endnode

## ------------------------------------------------------------------------

@node %DateiformateGRP "File formats - Object groups"
@symbol "Group files"
@toc "File formats"
@autorefoff
File formats, Object groups                                           Thing
@line 1 75 0 0 7
@autorefon

Jede Objektgruppe wird in einer eigenen Datei mit der Endung '.GRP' gespei-
chert. Als Eigenschaften der Gruppe werden neben den darin enthaltenen
Objekten auch noch folgende Merkmale gesichert:

 - Ein beliebiger Titel fÅr das Gruppenfenster
 - Position und Grîûe des Gruppenfensters
 - Darstellung als Icons/Text

Der Inhalt der Gruppendatei ist Ñhnlich aufgebaut, wie alle anderen Konfi-
gurationsdateien von Thing:

 - Leerzeilen und Zeilen mit einem fÅhrenden '#' werden ignoriert
 - Jeder Eintrag besteht aus einer 4 Zeichen langen Kennung am Zeilenanfang

Im Gegensatz zu den Konfigurationsdateien darf man sich darauf verlassen,
daû auch zukÅnftige Versionen von Thing mit dem nachfolgend beschriebenen
Format klar kommen.

Als erster Eintrag mÅssen Gruppentitel, Fensterposition etc. angegeben
werden:

@box 3 70 3
@box 3 70 12

   INFO "<Titel>" <x> <y> <w> <h> <Anzeige> <autosave>

   <Titel>             Titel der Gruppe, maximal 32 Zeichen
   <x>, <y>, <w>, <h>  Position und Grîûe des Fenster, umgerechnet auf
                       ein Koordinatensystem von 0/0 bis 10000/10000
   <Anzeige>           Anzeige
                        0 = Anzeige als Icons
                        1 = Anzeige als Text
   <autosave>          énderungen automatisch sichern
                         0 = nein
                         1 = ja

Dateiobjekte haben folgendes Format:

@box 3 70 3
@box 3 70 6

   OFIL "<Titel>" <Datei> "<Parameter>"

   <Titel>      Beliebiger Titel, maximal 32 Zeichen
   <Datei>      Dateiname
   <Parameter>  Kommandozeilen-Parameter fÅr Programme

Ordnerobjekte haben folgendes Format:

@box 3 70 3
@box 3 70 6

   OFLD "<Titel>" <Pfad> "<Wildcard>"

   <Titel>      Beliebiger Titel, maximal 32 Zeichen
   <Pfad>       Ordnername - muû mit '\' abgeschlossen sein!
   <Wildcard>   Dateimaske oder '*' fÅr 'alle Dateien'

Die Objekte erscheinen im Gruppenfenster in der Reihenfolge, in der sie in
der Datei enthalten sind. Wird im Datei- oder Ordnernamen kein absoluter
Pfad angegeben, verwendet Thing den Pfad der Gruppendatei. Dabei sind auch
'speziellere' Konstruktionen wie '..\readme' u.é. zulÑssig. Die Dateimaske
darf auch entfallen - d.h. man kann als fÅr <Wildcard> auch "" angeben.

@box 1 75 19

@image ictip.img 2
      Damit auch Sonderzeichen und die AnfÅhrungszeichen selber als Be-
      standteil des Titels und der Parameter gespeichert werden kînnen,
      werden einige ASCII-Codes speziell codiert. Statt einzelner Zeichen
      werden spezielle Steuersequenzen verwendet (Das gilt nicht fÅr die
      Angabe von Datei- oder Pfadnamen!):

        ASCII 1 ... 31        als "@01" ... "@31"
        AnfÅhrungszeichen (") als "@34"
        At-Zeichen (@)        als "@64"

      Man sollte dies beim Erstellen eigener Programme beachten, die Grup-
      pendateien selber erzeugen!

      Thing îffnet Gruppen auch dann, wenn der Name der Gruppendatei mit
      einer VA_START oder AV_STARTPROG-Message Åbergeben wurde. Dadurch
      ist es auch mîglich, Gruppen durch andere Programm aufbauen zu
      lassen und diese dann an Thing zu Åbergeben.


@endnode

## ------------------------------------------------------------------------

@node %DateiformateRSC "File formats - THING.RSC"
@next %DateiformateRSC
@symbol "THING.RSC"
@toc "File formats"
@autorefoff
File formats, THING.RSC                                               Thing
@line 1 75 0 0 7
@autorefon

Thing arbeitet mittlerweile auch mit einer externen Resourcendatei
THING.RSC. Diese Datei ist eine normale GEM-Resourcedatei, die mit jedem
Åblichen RSC-Editor (Interface, ORCS, WERCS etc.) bearbeitet werden kann.

Bei der énderung dieser Datei sind allerdings einige Punkte zu beachten:

 ˘ Thing rechnet die Koordinaten beim Laden der Resourcedatei nicht auf
   der Basis des Systemfonts um, sondern anhand der 'Entwurfsgrîûe' des
   Systemfonts. Der erste Objektbaum in THING.RSC enthÑlt diese Angabe
   als String (Objektnummer 1) im ersten Objektbaum:

     " 8 16" ... bedeutet das der Font beim @{I}Entwurf@{i} der Datei 8*16 Pixel
                 groû war. Diese Angabe muû geÑndert werden, wenn man
                 beim @{I}éndern@{i} der Datei mit einem anderen Systemfont
                 (z.B. 7*12 Pixel oder 8*8 Pixel) arbeitet!

 ˘ @{B}Eine verÑnderte Version dieser Datei darf nicht îffentlich weitergegeben
   werden! Ist die Verîffentlichung einer landessprachlichen öbersetzung
   gewÅnscht, dann bitte die Datei mir schicken - ich werde es dann in
   einem Update beilegen!@{b}

 ˘ Die Resource liegt schon hart an der Grenze von 64kB MaximallÑnge -
   speziell bei Interface muû man darauf achten, daû die Datei nicht
   im RSX-Format gespeichert wird, weil Sie lÑnger als 64kB wird!

 ˘ Alle Tastaturshortcuts sind MagiC-kompatibel -- d.h. man kann die
   Shortcuts unter MagiC direkt einsehen und Ñndern. Bei den
   'Karteikarten'-Buttons sind die Shortcuts zwar nicht direkt sichtbar,
   aber auch MagiC-kompatibel definiert.

 ˘ MenÅshortcuts werden ausgewertet. Man kann also die Shortcuts nach
   Bedarf abÑndern. Nach Mîglichkeit sollten allerdings nur Tasten-Kombina-
@box 15 7 1
@box 32 7 1
@box 40 9 1
   tionen mit  Shift  (X) und  Shift + Control  (^X) verwendet werden.

@box 17 7 1
@box 25 5 1
   Der Shortcut  Shift + DEL  fÅr 'Lîschen' wird direkt von Thing abgefragt
   und kann nicht abgeschaltet werden - man kann hier zwar einen anderen
   Shortcut eintragen -- dieser wird aber dann @{I}zusÑtzlich@{i} verwendet.

 ˘ Das verwendete RCS muû in der Lage sein, die oberen 8 Bits des Objekt-
   typs korrekt zu lesen (das alte Digital Research RCS kommt damit meines
   Wissens nach nicht klar!).

 ˘ Einige Dialoge enthalten 'Karteikarten', die einfach als Åbereinander-
   gelegte ObjektbÑume abgelegt wurden. Das RCS darf diese BÑume
   @{B}nicht@{b} automatisch in 'Parent-Child'-Beziehungen verknÅpfen!
@endnode
