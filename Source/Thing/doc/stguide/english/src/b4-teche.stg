## ------------------------------------------------------------------------
## Environment, TOSWIN
## ------------------------------------------------------------------------

@node "Environmental variables" "Thing Documentation - Environmental variables"
@prev "Environmental variables"
@include header.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    Environmental variables
     ˘ @{General link %EnvA}
     ˘ AVSERVER
     ˘ HOME
     ˘ THINGDIR
     ˘ @{"LINES, COLUMNS" link LINES}
     ˘ STGUIDE
@endnode

## ------------------------------------------------------------------------

@node %EnvA "Environmental variables - Anmerkungen"
@toc "Environmental variables"
@autorefoff
Environmental variables, General                                      Thing
@line 1 75 0 0 7
@autorefon

Thing setzt selber keine 'globalen' Environmentvariablen, sondern wertet
nur vorhandene EintrÑge aus. Es ist aber unter Single-TOS, MagiC!3 und
MultiTOS mîglich, fÅr angemeldete Applikationen ein beliebiges 'lokales'
Environment zu verwenden. Dabei werden von Thing beim Programmstart
zusÑtzlich zu den bereits vorhandenen Variablen eigene hinzugefÅgt, die
man selber definieren kann.

Die auf den folgenden Seiten beschriebenen Variablen werden von Thing
beim Programmstart ausgewertet. Wie Sie gesetzt werden kînnen, ist in der
@{"Installationsanleitung" link %InstallationS} beschrieben.
@endnode

## ------------------------------------------------------------------------

@node AVSERVER "Environmental variables - AVSERVER"
@toc "Environmental variables"
@autorefoff
Environmental variables, AVSERVER                                     Thing
@line 1 75 0 0 7
@autorefon

AVSERVER legt in einer Multitasking-Umgebung fest, welches Programm als
'AV-Server' arbeitet. Da Thing normalerweise der Server ist, muû diese
Variable auch entsprechend auf 'THING' gesetzt werden.

 @{"Anpassungen an das Betriebssystem" link %InstallationS}
@endnode

## ------------------------------------------------------------------------

@node HOME "Environmental variables - HOME"
@toc "Environmental variables"
@autorefoff
Environmental variables, HOME                                         Thing
@line 1 75 0 0 7
@autorefon

Ist HOME gesetzt, verwendet Thing das darin angegebene Verzeichnis fÅr
die Konfigurationsdateien (auûer ICONS.INF). Ist in HOME kein Laufwerk
angegeben, wird derzeit von Laufwerk U: als Rootverzeichnis ausgegangen.
UNIXMODE wird derzeit (noch) nicht ausgewertet!

Mit THINGDIR wird HOME auûer Kraft gesetzt. Damit ist es mîglich, auch
unter MiNT-OS u.Ñ. Systemen ein festes Verzeichnis fÅr Thing anzugeben.

Beispiel: Ist HOME auf '\usr\arno' gesetzt, verwendet Thing das Verzeichnis
          'U:\usr\arno' fÅr die Konfigurationsdateien.
@endnode

## ------------------------------------------------------------------------

@node THINGDIR "Environmental variables - THINGDIR"
@toc "Environmental variables"
@autorefoff
Environmental variables, THINGDIR                                     Thing
@line 1 75 0 0 7
@autorefon

Ist THINGDIR gesetzt, verwendet Thing das darin angegebene Verzeichnis als
Startverzeichnis - d.h. alle Konfigurationsdateien, ICONS.RSC, ICONS.INF
und die Zusatzprogramme THINGRUN.PRG und THINGICN.APP werden in diesem
Verzeichnis erwartet.

HOME wird in diesem Fall ignoriert.

Beispiel: THINGDIR=C:\THING\
@endnode

## ------------------------------------------------------------------------

@node LINES "Environmental variables - LINES, COLUMS"
@symbol "COLUMNS"
@toc "Environmental variables"
@autorefoff
Environmental variables, LINES, COLUMNS                               Thing
@line 1 75 0 0 7
@autorefon

Sind LINES und COLUMNS beim Start von Thing gesetzt, wird die Grîûe des
Terminals im Console-Fenster entsprechend angepasst.

Dabei gibt LINES die Anzahl der Zeilen und COLUMNS die Anzahl der Spalten
an.
@endnode

## ------------------------------------------------------------------------

@node STGUIDE "Environmental variables - STGUIDE"
@next STGUIDE
@toc "Environmental variables"
@autorefoff
Environmental variables, STGUIDE                                      Thing
@line 1 75 0 0 7
@autorefon

In einer Multitasking-Umgebung wie MagiC oder MultiTOS kann Thing ST-Guide
auch nachladen. Dazu muû allerdings in STGUIDE der vollstÑndige Dateiname
angegeben werden.

Beispiel: STGUIDE=D:\TOOLS\ST-GUIDE\ST-GUIDE.PRG
@endnode

## ------------------------------------------------------------------------
## TOSWIN
## ------------------------------------------------------------------------

@node TOSWIN "Thing and TOSWIN under MiNT"
@prev TOSWIN
@next TOSWIN
@autorefoff
Thing and TOSWIN under MiNT                                           Thing
@line 1 75 0 0 7
@autorefon

Ist TOSWIN von Eric R. Smith unter Single-TOS & MiNT als Accessory
installiert, wird es von Thing automatisch zur AusfÅhrung von TOS/TTP-
Programmen verwendet, wenn die Option 'TOS2GEM benutzen' in der Vorein-
stellung (Rubrik 'TOS2GEM') ausgeschaltet ist.

Dazu wird die Pipe 'U:\PIPE\TOSRUN' verwendet, wie es von Eric R. Smith
dokumentiert wurde. Damit das gestartete Programm auch 'sichtbar' ist,
schickt Thing vor dem Schreibzugriff auf die Pipe noch eine AC_OPEN-
Message an TOSWIN - andernfalls wÅrde das Programm zwar gestartet, aber
TOSWIN nicht geîffnet :-/.

Getestet habe ich das Ganze mit MiNT 1.12, TOS 2.06 und TOSWIN 1.04
auf einem 1040STe - dort hat es jedenfalls wunderbar geklappt.

Mîchte man nicht, daû Thing TOSWIN automatisch verwendet, genÅgt es
TOSWIN.ACC umzubenennen (z.B. TOSRUN.ACC) - da Thing vor dem Zugriff
auf die Pipe prÅft, ob eine Applikation mit dem Namen 'TOSWIN  ' aktiv
ist. Eine zusÑtzliche Option in Thing wollte ich nicht aufnehmen, da
die Zahl der Benutzer mit MiNT, Single-TOS und TOSWIN wohl eher gering
sein dÅrfte.
@endnode
