## THINGICN.STG
## Quelltext zur ST-GUIDE-Dokumentation zu ThingIcn

@options +z
@options -s
@author "Arno Welzel"
@database "Dokumentation zu ThingIcn"
@subject "Dokumentation/Shells"
@$VER: thingicn.hyp 1.10
@hostname THING

@define VERSION 1.10

@default %I
@help %Hilfe

## ------------------------------------------------------------------------
## Externe Referenzen
## ------------------------------------------------------------------------

@extern Thing THING.HYP
@extern ST-Guide ST-GUIDE.HYP
@extern ICONS.INF THING.HYP/DateiformateIC

## ------------------------------------------------------------------------
## Inhaltsverzeichnis
## ------------------------------------------------------------------------

@node %I "Documentation for ThingIcn @:"VERSION" - Table of Contents"
@symbol "Table of Contents"
@noref
@prev %I
@next %I
@xref Index
@xref st-guide.hyp "ST-Guide"
@xref thing.hyp "Thing"
@include headert.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    General
     ˘ @{"All new -- Introduction" link Introduction}
     ˘ Main window
     ˘ Keyboard operation
     ˘ @{"Editing the assignments" link %dedit}

@line 2 2 0
@line 4 0 1
@line 2 2 1
    Menu commands
     ˘ @{"File - Save" link %msave}
     ˘ @{"File - Last Version" link %mrevert}
     ˘ @{"File - Cycle Windows" link %mnwin}
     ˘ @{"File - Quit" link %mquit}
     ˘ @{"Edit - Edit Assignments..." link %medit}
     ˘ @{"Edit - Find Assignment..." link %mfind}
     ˘ @{"Edit - Find Icon..." link %mfindic}
@endnode

## ------------------------------------------------------------------------
## Hilfeseite
## ------------------------------------------------------------------------

@node %Hilfe "Documentation for Thing - Help"
@symbol "Hilfe?!"
@noref
@prev %Hilfe
@next %Hilfe
@xref %I Table of Contents
@xref Index
@xref st-guide.hyp "ST-Guide"
@xref thing.hyp "Thing"
@autorefoff
Help                                                               ThingIcn
@line 1 75 0 0 7

You are currently reading the hypertext documentation for ThinIcn @:"VERSION", the
Icon Manager for Thing. Help for given functions can be requested in two 
ways:

@box 38 9 1
 1) Select a menu entry while holding down the  Control  key.

@box 36 6 1
 2) Within dialogs with the  Help  key, as long as these appear in windows.

In ST-Guide you can also browse from the keyboard. With the keys
@box 1 9 1
@box 11 3 1
@box 19 9 1
@box 29 3 1
 Control +   and  Control +   you can reach the previous or next page.
@box 71 5 1
To reach a cross-reference from the keyboard, press  Tab
@box 63 8 1
(to select the first or next cross-reference present) and then  Return  
@box 39 6 1
(to call the relevant page).  Undo  returns to the original page.
@autorefon
@endnode

## ------------------------------------------------------------------------
## Intro
## ------------------------------------------------------------------------

@node Introduction "Documentation for ThingIcn @:"VERSION" - Introduction"
@toc %I
@prev Introduction
@autorefoff
Introduction                                                       ThingIcn
@line 1 75 0 0 7
@autorefon

Some of you may know the original ThingIcn that still came from Holger 
Weets. However, many people didn't like the user interface; in addition, 
that ThingIcn could not display coloured icons.

Hence the present ThingIcn was reconstructed from the ground up, based on 
foundations still from Arno Welzel, the rest done by Thomas Binder and 
Dirk Klemmt. ThingIcn was quite deliberately @{0U}not@{0} integrated into @{"Thing" LINK "THING.HYP"},
since after all @{"ICONS.INF" LINK "thing.hyp/DateiformateIC"} is not normally being altered constantly and 
@{"Thing" LINK "THING.HYP"} would otherwise just be 'inflated' needlessly.

So what can and cannot ThingIcn do?

  ˘ ThingIcn reads the files @{"ICONS.INF" LINK "thing.hyp/DateiformateIC"} and ICONS.RSC from the current 
    directory, or from the directory that is specified by the environment
    variable @{"THINGDIR" LINK "thing.hyp/THINGDIR"}, and allows a simple way of editing the assignments
    between files, folders, drives and the icons contained therein.

  ˘ As usual, ThingIcn supports the AV Protocol -- so in a multitasking 
    environment all keyboard shortcuts of @{"Thing" LINK "THING.HYP"} can continue to be used 
    (as long as these are not assigned in ThingIcn) and all windows will 
    be registered with the AV-Server (normally Thing).

  ˘ ThingIcn does @{0I}not@{0} run as a desk accessory any more! In return it
    offers some new features, such as @{"keyboard operation" LINK "Keyboard operation"}, window dialogs
    etc., for instance.

  ˘ ThingIcn does not contain an icon editor! It is also not possible to
    read in icons from other resource files, or to delete icons. If there 
    is sufficient demand, it is possible that at least the reading in and 
    deletion of icons could be added in future versions... It's up to you 
    to contact the authors and make your wishes known!

Although ThingIcn belongs to @{"Thing" LINK "THING.HYP"}, it is being distributed as a separate 
archive, since the Thing archive is already on the large side, and anyway 
this permits independent updates. You can find the @{"contact addresses" LINK "thing.hyp/%EinfÅhrungN"} in 
the hypertext for @{"Thing" LINK "THING.HYP"}.

The English translation of the resource and hypertext has been provided
by TransAction.

@endnode

## ------------------------------------------------------------------------

@node "Main window"
@toc %I
@autorefoff
Main window                                                        ThingIcn
@line 1 75 0 0 7
@autorefon

@limage tmainwin.img 2

The main window displays all icons from the ICONS.RSC file. If this window 
is closed , ThingIcn will be terminated. The icons will be positioned 
automatically, so there is no need for a horizontal slider.

A double-click on an icon opens the dialog for editing the assignment of
this icon.

With suitable operating systems there is an even easier way: You can drag 
files, folders or drives from within @{"Thing" LINK "THING.HYP"} (or another AV-Server) onto the 
desired icon. If one holds down one of the 'special' keys ( Control , 
Alternate  or  Shift ) while 'dropping' a file then the extension of the 
dropped file will -- as far as possible -- be ascertained and assigned to 
the icon prefixed by a '*.'; so 'README.TXT' would produce '*.TXT'.

@endnode

## ------------------------------------------------------------------------

@node "Keyboard operation"
@toc %I
@autorefoff
Keyboard operation                                                 ThingIcn
@line 1 75 0 0 7
@autorefon

@{U}'Normal' mode@{u}

No icon is selected. This is also the position immediately after starting 
ThingIcn. One can scroll the contents of the @{"main window" LINK "Main window"} with the
@box 26 7 1
cursorkeys. Holding down  Shift  during this scrolls page by page.
@box 6 9 1
@box 20 7 1
@box 28 9 1
With  ClrHome  and  Shift + ClrHome  one moves to the start or end of the
window contents respectively.

@box 1 8 1
 Insert  selects the first icon and switches over to the 'Cursor' mode.


@{U}'Cursor' mode@{u}

This mode becomes active as soon as an icon is selected. The cursor is 
@box 32 9 1
@box 45 7 1
@box 53 9 1
moved with the cursor keys and  ClrHome  or  Shift + ClrHome .

@box 1 8 1
 Return  allows the current icon to be edited -- this corresponds to a
double-click on the icon.

@box 1 8 1
 Insert  deselects the current icon and so switches back to the 'Normal'
mode.

@{0U}General@{0}

@box 53 11 1
Some options in dialogs can be selected by pressing  Alternate  together 
with the key for the underlined letter.

@endnode

## ------------------------------------------------------------------------

@node %dedit "Editing the assignments"
@toc %I
@autorefoff
Editing the assignments                                            ThingIcn
@line 1 75 0 0 7
@autorefon

The assignments for an individual icon are edited in a dialog box.

@limage teditwin.img 2

'Icon' is the label of the icon in the resource file, which serves to 
identify the icon.
'Type' specifies the uses of the icon. Some icons are so-called 'Standard 
icons', meaning that they will also be used if no assignments are present.
One can, however, also assign given files, folders etc. to standard icons.

Below the name and type of the icon, all of its assignments are displayed 
in a list box. The format of this list box is:

  <Type> <Character> <Wildcard>

<Type> shows the type of the assignment:

   F = File, O = Folder, D = Drive

<Character> is the (optional) character that can be prefixed to files in 
the directory window in text mode. The character will not be used if the 
'Suppress mini-icons in text mode' option in the 'Window 1' page of the
'Extra' - 'Setup' menu in @{"Thing" LINK "THING.HYP"} is set!

@box 54 9 1
@box 64 3 1
The list box can also be operated from the keyboard:  Control +   and
@box 1 9 1
@box 11 3 1
 Control +   move the selection bar up and down respectively. In addition
@box 6 9 1
@box 16 9 1
@box 30 9 1
@box 40 7 1
@box 48 9 1
with  Control + ClrHome  and  Control + Shift + ClrHome  one can reach the
first and last entry of the list respectively.

Finally, the lower region of the dialog permits editing of the assignment
@box 40 7 1
that is selected in the list box. With  Alter  the input data are adopted,
@box 7 8 1
while  Delete  removes the selected assignment.

The colour for the display of an entry in the text or mini-icon mode of
@{"Thing" LINK "THING.HYP"} is shown also in the lower region of the dialog, and may be altered 
there; to change it, click on the number in the popup, not the small 
coloured field left of it. 'No colour' is represented by light stippling in 
the selection field.

To insert a new assignment, just select the last 'empty' entry in the list,
@box 40 7 1
enter the desired data and then select  Alter . The entry will be included
win the list and a new 'empty' entry will be created at the end of the list.

@endnode

## ------------------------------------------------------------------------
## MenÅbefehle
## ------------------------------------------------------------------------

@node %msave "File - Save"
@symbol "Save"
@toc %I
@autorefoff
File - Save                                                        ThingIcn
@line 1 75 0 0 7
@autorefon

With this command the icon assignments are saved to the file @{"ICONS.INF" LINK "thing.hyp/DateiformateIC"}.
Invalid assignments that were recognised when reading in the file will be 
included as comments at the start. With a multitasking system, a parallel-
running @{"Thing" LINK "THING.HYP"} will be notified immediately that the icon assigments have 
changed, and after a safety query these will be loaded in.

During saving, ThingIcn sorts the assignments automatically so that the 
most common wildcards lie at the end of the file. This is necessary because 
@{"Thing" LINK "THING.HYP"} searches through the assignments in the order that they lie in 
@{"ICONS.INF" LINK "thing.hyp/DateiformateIC"}. Without this sorting the icon for, say, 'DISKUS.APP' would 
never be used if an earlier assignment for '*.APP' was found.

@box 1 75 6

@image icwarn.img 2
      An @{"ICONS.INF" LINK "thing.hyp/DateiformateIC"} saved by ThingIcn version 1.10 or higher requires at
      least @{"Thing" LINK "THING.HYP"} 1.20 in order to be read correctly. If one has assigned 
      a '*' to a standard icon, then at least Thing 1.25 is required to
      ensure correct results are obtained.

@endnode

## ------------------------------------------------------------------------

@node %mrevert "File - Last Version"
@symbol "Last Version"
@toc %I
@autorefoff
File - Last Version                                                ThingIcn
@line 1 75 0 0 7
@autorefon

With this menu entry any changes made since the last save will be discarded 
after a safety query.

@endnode

## ------------------------------------------------------------------------

@node %mnwin "File - Cycle Windows"
@symbol "Cycle Windows"
@toc %I
@autorefoff
File - Cycle Windows                                               ThingIcn
@line 1 75 0 0 7
@autorefon

This function tops another window. If ThingIcn is running in a multitasking
OS (MagiC, MultiTOS) and @{"AVSERVER" LINK "thing.hyp/AVSERVER"} is set correctly, then if required 
@box 21 9 1
@box 31 3 1
the key combination  Control + W  is sent to the server (normally @{"Thing" LINK "THING.HYP"}) 
with @{"AV_SENDKEY" LINK "thing.hyp/AV_SENDKEY"}.
@endnode

## ------------------------------------------------------------------------

@node %mquit "File - Quit"
@symbol "Quit"
@toc %I
@autorefoff
File - Quit                                                        ThingIcn
@line 1 75 0 0 7
@autorefon

This -- as you might expect -- quits ThingIcn ;-)

If necessary, any changes will be saved after a safety query in @{"ICONS.INF" LINK "thing.hyp/DateiformateIC"} 
and @{"Thing" LINK "THING.HYP"} informed about this (as long as ThingIcn is running in a 
multitasking envirnoment parallel to Thing).

@endnode

## ------------------------------------------------------------------------

@node %medit "Edit - Edit Assignments"
@symbol "Edit Assignments"
@toc %I
@autorefoff
Edit - Edit Assignments                                            ThingIcn
@line 1 75 0 0 7
@autorefon

@box 39 8 1
This menu entry -- just like pressing  Return  -- opens the dialog for
editing the assignments of the currently selected icon.

@endnode

## ------------------------------------------------------------------------

@node %mfind "Edit - Find Assignment..."
@symbol "Find Assignment..."
@toc %I
@autorefoff
Edit - Find Assignment...                                          ThingIcn
@line 1 75 0 0 7
@autorefon

This function is used to search for a given wildcard. A dialog box appears
listing all wildcards present. The desired entry can be found quickly via 
an 'Autolocator'.

@box 28 4 1
If the dialog is quit with  OK  , ThingIcn selects the associated icon in 
the @{"main window" LINK "Main window"}.

@endnode

## ------------------------------------------------------------------------

@node %mfindic "Edit - Find Icon..."
@symbol "Find Icon..."
@next %mfindic
@toc %I
@autorefoff
Edit - Find Icon...                                                ThingIcn
@line 1 75 0 0 7
@autorefon

@limage tsearch.img 2

This function is used to search for a given icon. A dialog box appears
listing all icons present. The desired entry can be found quickly via an 
'Autolocator'.

@box 28 4 1
If the dialog is quit with  OK  , ThingIcn selects the associated icon in 
the @{"main window" LINK "Main window"}.

@endnode
